{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/defaults.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert-is-positive-number';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isUint32Array from '@stdlib/assert-is-uint32array';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport noop from '@stdlib/utils-noop';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport { factory as randn } from '@stdlib/random-base-improved-ziggurat';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Gaussian noise with standard deviation `sigma`.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates pseudorandom numbers drawn from a standard normal distribution\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* import iterSineWave from '@stdlib/simulate-iter-sine-wave';\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawgn( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawgn( iterator, sigma, options ) {\n\tvar rnorm;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( '0t53v', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( '0t572', sigma ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0t58J', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( '0t52o', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( '0t56u', 'prng', options.prng ) );\n\t\t\t}\n\t\t\trnorm = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( '0t56z', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( '0t574', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( rnorm === void 0 ) {\n\t\trnorm = randn( opts );\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rnorm.PRNG );\n\t}\n\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rnorm.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rnorm.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rnorm.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rnorm.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rnorm.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trnorm.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + ( sigma*rnorm() );\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawgn( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterawgn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'copy': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n"],"names":["iterawgn","iterator","sigma","options","rnorm","opts","iter","FLG","isIteratorLike","TypeError","format","isPositiveNumber","copy","arguments","length","isPlainObject","hasOwnProp","isBoolean","isFunction","prng","state","isUint32Array","seed","randn","setReadOnly","v","done","next","value","NaN","iteratorSymbol","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","seedLength","s","stateLength","byteLength","PRNG"],"mappings":";;8gDA+EA,SAASA,EAAUC,EAAUC,EAAOC,GACnC,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAgBP,GACrB,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAEvC,IAAMU,EAAkBT,GACvB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAGvC,GADAG,EC7DO,CACNO,MAAQ,GD6DJC,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAeZ,GACpB,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAEvC,GAAKa,EAAYb,EAAS,UACzBE,EAAKO,KAAOT,EAAQS,MACdK,EAAWd,EAAQS,OACxB,MAAM,IAAIH,UAAWC,EAAQ,QAAS,OAAQP,EAAQS,OAGxD,GAAKI,EAAYb,EAAS,QAAW,CACpC,IAAMe,EAAYf,EAAQgB,MACzB,MAAM,IAAIV,UAAWC,EAAQ,QAAS,OAAQP,EAAQgB,OAEvDf,EAAQD,EAAQgB,IAChB,MAEI,GAAKH,EAAYb,EAAS,UAE9B,GADAE,EAAKe,MAAQjB,EAAQiB,OACfC,EAAelB,EAAQiB,OAC5B,MAAM,IAAIX,UAAWC,EAAQ,QAAS,QAASP,EAAQiB,aAIpD,GAAKJ,EAAYb,EAAS,UAC9BE,EAAKiB,KAAOnB,EAAQmB,UACE,IAAjBnB,EAAQmB,MACZ,MAAM,IAAIb,UAAWC,EAAQ,QAAS,OAAQP,EAAQmB,MAGxD,CA8BD,YA7Be,IAAVlB,IACJA,EAAQmB,EAAOlB,IAIhBmB,EADAlB,EAAO,CAAA,EACY,QA6FnB,WACC,IAAImB,EACJ,GAAKlB,EACJ,MAAO,CACNmB,MAAQ,GAIV,IADAD,EAAIxB,EAAS0B,QACND,KAEN,OADAnB,GAAM,EACCkB,EAGPA,EADuB,iBAAZA,EAAEG,MACTH,EAAEG,MAAU1B,EAAME,IAElByB,IAEL,MAAO,CACND,MAASH,EACTC,MAAQ,EAET,IAjHDF,EAAalB,EAAM,UA0HnB,SAAcsB,GAEb,GADArB,GAAM,EACDM,UAAUC,OACd,MAAO,CACNc,MAASA,EACTF,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IAlIII,GAAkBZ,EAAYjB,EAAU6B,KAC5CN,EAAalB,EAAMwB,GAyIpB,WACC,OAAO9B,EAAUC,EAAU6B,KAAoB5B,EAAOG,EACtD,IAxIIF,GAAWA,EAAQgB,MACvBK,EAAalB,EAAM,OAAQ,MAC3BkB,EAAalB,EAAM,aAAc,MACjCyB,EAAsBzB,EAAM,QAAS0B,EAAkB,MAAQC,GAC/DT,EAAalB,EAAM,cAAe,MAClCkB,EAAalB,EAAM,aAAc,MACjCkB,EAAalB,EAAM,OAAQ,QAE3B4B,EAAqB5B,EAAM,QAgB5B,WACC,OAAOF,EAAMkB,IACb,IAjBAY,EAAqB5B,EAAM,cAyB5B,WACC,OAAOF,EAAM+B,UACb,IA1BAJ,EAAsBzB,EAAM,SAsD7B,WACC,OAAOF,EAAMgB,KACb,IASD,SAAmBgB,GAClBhC,EAAMgB,MAAQgB,CACd,IAlEAF,EAAqB5B,EAAM,eAiC5B,WACC,OAAOF,EAAMiC,WACb,IAlCAH,EAAqB5B,EAAM,cA0C5B,WACC,OAAOF,EAAMkC,UACb,IA3CAd,EAAalB,EAAM,OAAQF,EAAMmC,OAG3BjC,CAyHR"}